public class Sort_selection {

    public static int[] selection_Sort(int nums[]){
        int n=nums.length;

        for(int i=0;i<n;i++){
            int min_idx=i;
            for(int j=i+1;j<n;j++){
                if(nums[j] < nums[min_idx]){
                    min_idx=j;

                }
            }
            int temp=nums[min_idx];
            nums[min_idx]=nums[i];
            nums[i]=temp;
        }
        return nums;
    }

    public static void main(String[] args) {
        int nums[]={2,7,1,9,4,6};
        int result[]=selection_Sort(nums);
        for(int i=0;i<nums.length;i++){
            System.out.print(nums[i]+" ");
        }
    }
}
/*Time Complexity: Best, average, and worst case: O(n²) (always scans the unsorted part fully).
Space Complexity: O(1) — sorting is done in-place, no extra space needed.*/
