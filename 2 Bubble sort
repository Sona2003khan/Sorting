public class Sort_bubble {

    public static int[] bubble_Sort(int nums[]){
        int n=nums.length;

        for(int i=0;i<n;i++){
            for(int j=0;j<n-i-1;j++){
                if(nums[j] > nums[j+1]){
                    int temp=nums[j];
                    nums[j]=nums[j+1];
                    nums[j+1]=temp;
                }
            }
        }
        return nums;
    }

/*public static int[] bubble_Sort(int nums[], int n) {
        // Base case
        if (n == 1) {
            return nums;
        }

        for (int i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                int temp = nums[i];
                nums[i] = nums[i + 1];
                nums[i + 1] = temp;
            }
        }

        // Recursive call
        return bubble_Sort(nums, n - 1);
    }*/

    public static void main(String[] args) {
        int nums[]={2,7,1,9,4,6};
        int result[]=bubble_Sort(nums);
        for(int i=0;i<nums.length;i++){
            System.out.print(nums[i]+" ");
        }
    }
}

/*Time Complexity: Worst and average case is O(n²), best case (already sorted) is O(n).
Space Complexity: O(1) — in-place sorting, no extra space used.*/
